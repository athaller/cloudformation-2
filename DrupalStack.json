{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template multi-tier web-app-in-vpc.template: Creates a VPC public subnet  with: ELB, NAT, and bastion host.  Private WebServer subnet for EC2 Drupal instances. multi-az Amazon RDS database instance for storage. **WARNING** This template creates one or more Amazon EC2 instances, an Elastic Load Balancer and an Amazon RDS database. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "AZ1": {
      "Type": "String",
      "Description": "First availability zone to deploy into",
      "Default": "us-east-1a",
      "AllowedValues": [
        "eu-west-1a",
        "eu-west-1b",
        "eu-west-1c",
        "us-east-1a",
        "us-east-1b",
        "us-east-1c",
        "us-east-1d",
        "us-west-1a",
        "us-west-1b",
        "us-west-1c",
        "ap-southeast-1a",
        "ap-southeast-1b",
        "ap-northeast-1a",
        "ap-northeast-1b",
        "ap-northeast-1c",
        "us-west-2a",
        "us-west-2b",
        "us-west-2c",
        "sa-east-1a",
        "sa-east-1b",
        "ap-southeast-2a",
        "ap-southeast-2b"
      ],
      "ConstraintDescription": "Must be a valid EC2 Availability zone"
    },
    "AZ2": {
      "Type": "String",
      "Description": "Second availability zone to deploy into",
      "Default": "us-east-1b",
      "AllowedValues": [
        "eu-west-1a",
        "eu-west-1b",
        "eu-west-1c",
        "us-east-1a",
        "us-east-1b",
        "us-east-1c",
        "us-east-1d",
        "us-west-1a",
        "us-west-1b",
        "us-west-1c",
        "ap-southeast-1a",
        "ap-southeast-1b",
        "ap-northeast-1a",
        "ap-northeast-1b",
        "ap-northeast-1c",
        "us-west-2a",
        "us-west-2b",
        "us-west-2c",
        "sa-east-1a",
        "sa-east-1b",
        "ap-southeast-2a",
        "ap-southeast-2b"
      ],
      "ConstraintDescription": "Must be a valid EC2 Availability zone"
    },
    "AZ3": {
      "Type": "String",
      "Description": "Second availability zone to deploy into",
      "AllowedValues": [
        "eu-west-1a",
        "eu-west-1b",
        "eu-west-1c",
        "us-east-1a",
        "us-east-1b",
        "us-east-1c",
        "us-east-1d",
        "us-west-1a",
        "us-west-1b",
        "us-west-1c",
        "ap-southeast-1a",
        "ap-southeast-1b",
        "ap-northeast-1a",
        "ap-northeast-1b",
        "ap-northeast-1c",
        "us-west-2a",
        "us-west-2b",
        "us-west-2c",
        "sa-east-1a",
        "sa-east-1b",
        "ap-southeast-2a",
        "ap-southeast-2b"
      ],
      "ConstraintDescription": "Must be a valid EC2 Availability zone"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "SiteName": {
      "Default": "My Site",
      "Description": "The name of the Drupal Site",
      "Type": "String"
    },
    "SiteEmail": {
      "Description": "Email for site administrator",
      "Type": "String"
    },
    "SiteAdmin": {
      "Description": "The Drupal site administrator ",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "SitePassword": {
      "NoEcho": "true",
      "Description": "The Drupal site administrator account password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DBName": {
      "Default": "drupaldb",
      "Description": "The Drupal database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUsername": {
      "Default": "admin",
      "NoEcho": "true",
      "Description": "The Drupal database administrator account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "Default": "password",
      "NoEcho": "true",
      "Description": "The Drupal database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DBClass": {
      "Default": "db.m1.small",
      "Description": "Database instance class",
      "Type": "String",
      "AllowedValues": [
        "db.m1.small",
        "db.m1.large",
        "db.m1.xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge"
      ],
      "ConstraintDescription": "must select a valid database instance type."
    },
    "DBAllocatedStorage": {
      "Default": "5",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 5 and 1024Gb."
    },
    "MultiAZDatabase": {
      "Default": "true",
      "Description": "Create a multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "must be either true or false."
    },
    "SSHLocation": {
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "WebServerInstanceType": {
      "Description": "WebServer Server EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "WebServerSize": {
      "Description": "Number of EC2 instances to launch for the WebServer server",
      "Type": "Number",
      "Default": "1"
    },
    "BastionInstanceType": {
      "Description": "Bastion Host EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "NATInstanceType": {
      "Description": "NET Device EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AWSNATAMI": {
      "us-east-1": {
        "AMI": "ami-c6699baf"
      },
      "us-west-2": {
        "AMI": "ami-52ff7262"
      },
      "us-west-1": {
        "AMI": "ami-3bcc9e7e"
      },
      "eu-west-1": {
        "AMI": "ami-0b5b6c7f"
      },
      "ap-southeast-1": {
        "AMI": "ami-02eb9350"
      },
      "ap-southeast-2": {
        "AMI": "ami-ab990e91"
      },
      "ap-northeast-1": {
        "AMI": "ami-14d86d15"
      },
      "sa-east-1": {
        "AMI": "ami-0439e619"
      }
    },
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "64"
      },
      "m1.small": {
        "Arch": "64"
      },
      "m1.medium": {
        "Arch": "64"
      },
      "m1.large": {
        "Arch": "64"
      },
      "m1.xlarge": {
        "Arch": "64"
      },
      "m2.xlarge": {
        "Arch": "64"
      },
      "m2.2xlarge": {
        "Arch": "64"
      },
      "m2.4xlarge": {
        "Arch": "64"
      },
      "m3.xlarge": {
        "Arch": "64"
      },
      "m3.2xlarge": {
        "Arch": "64"
      },
      "c1.medium": {
        "Arch": "64"
      },
      "c1.xlarge": {
        "Arch": "64"
      },
      "cc1.4xlarge": {
        "Arch": "64Cluster"
      },
      "cc2.8xlarge": {
        "Arch": "64Cluster"
      },
      "cg1.4xlarge": {
        "Arch": "64GPU"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "32": "ami-a0cd60c9",
        "64": "ami-aecd60c7",
        "64Cluster": "ami-a8cd60c1",
        "64GPU": "ami-eccf6285"
      },
      "us-west-2": {
        "32": "ami-46da5576",
        "64": "ami-48da5578",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "us-west-1": {
        "32": "ami-7d4c6938",
        "64": "ami-734c6936",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "eu-west-1": {
        "32": "ami-61555115",
        "64": "ami-6d555119",
        "64Cluster": "ami-67555113",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-southeast-1": {
        "32": "ami-220b4a70",
        "64": "ami-3c0b4a6e",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-southeast-2": {
        "32": "ami-b3990e89",
        "64": "ami-bd990e87",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-northeast-1": {
        "32": "ami-2a19aa2b",
        "64": "ami-2819aa29",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "sa-east-1": {
        "32": "ami-f836e8e5",
        "64": "ami-fe36e8e3",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      }
    },
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.10.0.0/16"
      },
      "Public": {
        "CIDR": "10.10.0.0/24"
      },
      "WebServer": {
        "CIDR": "10.10.10.0/24"
      },
      "RDS1": {
        "CIDR": "10.10.21.0/24"
      },
      "RDS2": {
        "CIDR": "10.10.22.0/24"
      },
      "RDS3": {
        "CIDR": "10.10.23.0/24"
      }
    }
  },
  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Id": "UploadPolicy",
          "Statement": [
            {
              "Sid": "EnableReadWrite",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectACL"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Bucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "S3User",
                    "Arn"
                  ]
                }
              }
            }
          ]
        },
        "Bucket": {
          "Ref": "S3Bucket"
        }
      }
    },
    "S3User": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "S3Keys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "S3User"
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "Public",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "AvailabilityZone" : { "Ref" : "AZ1"}
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHLocation"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundEmphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "WebServerSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "WebServer",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "WebServer"
          }
        ],
        "AvailabilityZone" : { "Ref" : "AZ1"}
      }
    },
    "WebServerRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "WebServer"
          }
        ]
      }
    },
    "WebServerSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "WebServerSubnet"
        },
        "RouteTableId": {
          "Ref": "WebServerRouteTable"
        }
      }
    },
    "WebServerRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "WebServerRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },
    "WebServerNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "WebServer"
          }
        ]
      }
    },
    "InboundWebServerNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServerNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutBoundWebServerNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServerNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "WebServerSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "WebServerSubnet"
        },
        "NetworkAclId": {
          "Ref": "WebServerNetworkAcl"
        }
      }
    },
    "NATIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },
    "NATDevice": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSNATAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "NATSecurityGroup"
          }
        ]
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "BastionIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "BastionHost"
        }
      }
    },
    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "BastionInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "BastionInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "BastionSecurityGroup"
          }
        ]
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the Bastion host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Fn::FindInMap": [
                "SubnetConfig",
                "WebServer",
                "CIDR"
              ]
            }
          }
        ]
      }
    },
    "PublicElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "PublicLoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "90",
          "Timeout": "60"
        }
      }
    },
    "PublicLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "WebServerFleet": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "WebServerSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "WebServerSubnet"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "WebServerServerLaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "10",
        "DesiredCapacity": {
          "Ref": "WebServerSize"
        },
        "LoadBalancerNames": [
          {
            "Ref": "PublicElasticLoadBalancer"
          }
        ],
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "WebServerServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "httpd": [],
                "php": [],
                "php-mysql": [],
                "php-gd": [],
                "php-xml": [],
                "php-mbstring": [],
                "mysql": [],
                "gcc": [],
                "make": [],
                "libstdc++-devel": [],
                "gcc-c++": [],
                "fuse": [],
                "fuse-devel": [],
                "libcurl-devel": [],
                "libxml2-devel": [],
                "openssl-devel": [],
                "mailcap": []
              }
            },
            "sources": {
              "/var/www/html": "http://ftp.drupal.org/files/projects/drupal-7.8.tar.gz",
              "/home/ec2-user": "http://ftp.drupal.org/files/projects/drush-7.x-4.5.tar.gz",
              "/home/ec2-user/s3fs": "http://s3fs.googlecode.com/files/s3fs-1.61.tar.gz"
            },
            "files": {
              "/etc/passwd-s3fs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "S3Keys"
                      },
                      ":",
                      {
                        "Fn::GetAtt": [
                          "S3Keys",
                          "SecretAccessKey"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/home/ec2-user/settings.php": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "<?php\n",
                      "\n",
                      "$databases = array (\n",
                      "  'default' =>\n",
                      "  array (\n",
                      "    'default' =>\n",
                      "    array (\n",
                      "      'database' => '",
                      {
                        "Ref": "DBName"
                      },
                      "',\n",
                      "      'username' => '",
                      {
                        "Ref": "DBUsername"
                      },
                      "',\n",
                      "      'password' => '",
                      {
                        "Ref": "DBPassword"
                      },
                      "',\n",
                      "      'host' => '",
                      {
                        "Fn::GetAtt": [
                          "DBInstance",
                          "Endpoint.Address"
                        ]
                      },
                      "',\n",
                      "      'port' => '",
                      {
                        "Fn::GetAtt": [
                          "DBInstance",
                          "Endpoint.Port"
                        ]
                      },
                      "',\n",
                      "      'driver' => 'mysql',\n",
                      "      'prefix' => 'drupal_',\n",
                      "    ),\n",
                      "  ),\n",
                      ");\n",
                      "\n",
                      "$update_free_access = FALSE;\n",
                      "\n",
                      "$drupal_hash_salt = '0c3R8noNALe3shsioQr5hK1dMHdwRfikLoSfqn0_xpA';\n",
                      "\n",
                      "ini_set('session.gc_probability', 1);\n",
                      "ini_set('session.gc_divisor', 100);\n",
                      "ini_set('session.gc_maxlifetime', 200000);\n",
                      "ini_set('session.cookie_lifetime', 2000000);\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "sendmail": {
                  "enabled": "false",
                  "ensureRunning": "false"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "WebServerInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "WebServerInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WebServerWaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install Apache Web Server, MySQL and Drupal\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r LaunchConfig ",
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "# Install s3fs\n",
                "cd /home/ec2-user/s3fs/s3fs-1.61\n",
                "./configure --prefix=/usr\n",
                "make\n",
                "make install\n",
                "# Move the website files to the top level\n",
                "mv /var/www/html/drupal-7.8/* /var/www/html\n",
                "mv /var/www/html/drupal-7.8/.htaccess /var/www/html\n",
                "rm -Rf /var/www/html/drupal-7.8\n",
                "# Mount the S3 bucket\n",
                "mv /var/www/html/sites/default/files /var/www/html/sites/default/files_original\n",
                "mkdir -p /var/www/html/sites/default/files\n",
                "s3fs -o allow_other -o use_cache=/tmp ",
                {
                  "Ref": "S3Bucket"
                },
                " /var/www/html/sites/default/files || error_exit 'Failed to mount the S3 bucket'\n",
                "echo `hostname` >> /var/www/html/sites/default/files/hosts\n",
                "# Make changes to Apache Web Server configuration\n",
                "sed -i 's/AllowOverride None/AllowOverride All/g'  /etc/httpd/conf/httpd.conf\n",
                "service httpd restart\n",
                "# Only execute the site install if we are the first host up - otherwise we'll end up losing all the data\n",
                "read first < /var/www/html/sites/default/files/hosts\n",
                "if [ `hostname` = $first ]\n",
                "then\n",
                "  # Create the site in Drupal\n",
                "  cd /var/www/html\n",
                "  ~ec2-user/drush/drush site-install standard --yes",
                "     --site-name='",
                {
                  "Ref": "SiteName"
                },
                "' --site-mail=",
                {
                  "Ref": "SiteEmail"
                },
                "     --account-name=",
                {
                  "Ref": "SiteAdmin"
                },
                " --account-pass=",
                {
                  "Ref": "SitePassword"
                },
                "     --db-url=mysql://",
                {
                  "Ref": "DBUsername"
                },
                ":",
                {
                  "Ref": "DBPassword"
                },
                "@",
                {
                  "Fn::GetAtt": [
                    "DBInstance",
                    "Endpoint.Address"
                  ]
                },
                ":",
                {
                  "Fn::GetAtt": [
                    "DBInstance",
                    "Endpoint.Port"
                  ]
                },
                "/",
                {
                  "Ref": "DBName"
                },
                "     --db-prefix=drupal_\n",
                "  # use the S3 bucket for shared file storage\n",
                "  cp -R sites/default/files_original/* sites/default/files\n",
                "  cp -R sites/default/files_original/.htaccess sites/default/files\n",
                "fi\n",
                "# Copy settings.php file since everything else is configured\n",
                "cp /home/ec2-user/settings.php /var/www/html/sites/default\n",
                "rm /home/ec2-user/settings.php\n",
                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"Drupal setup complete\" '",
                {
                  "Ref": "WebServerWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "RDSSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "RDS1",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "RDS"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AZ1"
        }
      }
    },
    "RDSSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "RDS2",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "RDS"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AZ2"
        }
      }
    },
    "RDSSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "RDS3",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "RDS"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AZ3"
        }
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "PublicLoadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "WebServerWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WebServerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "WebServerFleet",
      "Properties": {
        "Handle": {
          "Ref": "WebServerWaitHandle"
        },
        "Timeout": "600",
        "Count": {
          "Ref": "WebServerSize"
        }
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
        "SubnetIds": ["Ref" : "RDSSubnet1", "Ref" : "RDSSubnet2", "Ref" : "RDSSubnet3"
        ]
      }
    },
    "DBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": {
          "Ref": "DBName"
        },
        "Engine": "MySQL",
        "MultiAZ": {
          "Ref": "MultiAZDatabase"
        },
        "MasterUsername": {
          "Ref": "DBUsername"
        },
        "DBInstanceClass": {
          "Ref": "DBClass"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ],
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        }
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to database",
        "EC2VpcId": {
          "Ref": "VPC"
        },
        "DBSecurityGroupIngress": [
          {
            "EC2SecurityGroupId": {
              "Ref": "WebServerSecurityGroup"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "WebSite": {
      "Description": "URL of the website",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "PublicElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "Bastion": {
      "Description": "IP Address of the Bastion host",
      "Value": {
        "Ref": "BastionIPAddress"
      }
    }
  }
}